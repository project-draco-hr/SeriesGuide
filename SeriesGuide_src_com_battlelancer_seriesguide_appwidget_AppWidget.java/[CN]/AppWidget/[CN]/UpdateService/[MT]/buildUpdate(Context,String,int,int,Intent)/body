{
  ImageCache imageCache=((SeriesGuideApplication)getApplication()).getImageCache();
  RemoteViews views=new RemoteViews(context.getPackageName(),layout);
  views.removeAllViews(R.id.LinearLayoutWidget);
  Cursor upcomingEpisodes=SeriesDatabase.getUpcomingEpisodes(context);
  if (upcomingEpisodes.getCount() == 0) {
    RemoteViews item=new RemoteViews(context.getPackageName(),itemLayout);
    item.setTextViewText(R.id.textViewWidgetShow,context.getString(R.string.no_nextepisode));
    item.setTextViewText(R.id.textViewWidgetEpisode,"");
    item.setTextViewText(R.id.widgetAirtime,"");
    item.setTextViewText(R.id.widgetNetwork,"");
    views.addView(R.id.LinearLayoutWidget,item);
  }
 else {
    String value;
    Bitmap poster;
    int viewsToAdd=Integer.valueOf(limit);
    while (upcomingEpisodes.moveToNext() && viewsToAdd != 0) {
      viewsToAdd--;
      RemoteViews item=new RemoteViews(context.getPackageName(),itemLayout);
      String season=upcomingEpisodes.getString(upcomingEpisodes.getColumnIndexOrThrow(SeriesDatabase.EPISODE_SEASON));
      String number=upcomingEpisodes.getString(upcomingEpisodes.getColumnIndexOrThrow(SeriesDatabase.EPISODE_NUMBER));
      String title=upcomingEpisodes.getString(upcomingEpisodes.getColumnIndexOrThrow(SeriesDatabase.EPISODE_TITLE));
      SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
      item.setTextViewText(R.id.textViewWidgetEpisode,SeriesGuideData.getNextEpisodeString(prefs,season,number,title));
      long airtime=upcomingEpisodes.getLong(upcomingEpisodes.getColumnIndexOrThrow(SeriesDatabase.SERIES_AIRSTIME));
      value=SeriesGuideData.parseDateToLocalRelative(upcomingEpisodes.getString(upcomingEpisodes.getColumnIndexOrThrow(SeriesDatabase.EPISODE_FIRSTAIRED)),airtime,context);
      item.setTextViewText(R.id.widgetAirtime,value);
      value="";
      if (airtime != -1) {
        value=SeriesGuideData.parseMillisecondsToTime(airtime,null,false,getApplicationContext())[0];
      }
      String network=upcomingEpisodes.getString(upcomingEpisodes.getColumnIndexOrThrow(SeriesDatabase.SERIES_NETWORK));
      if (network.length() != 0) {
        value+=" " + getString(R.string.show_network) + " "+ network;
      }
      item.setTextViewText(R.id.widgetNetwork,value);
      value=upcomingEpisodes.getString(upcomingEpisodes.getColumnIndexOrThrow(SeriesDatabase.SERIES_NAME));
      item.setTextViewText(R.id.textViewWidgetShow,value);
      if (layout != R.layout.appwidget) {
        value=upcomingEpisodes.getString(upcomingEpisodes.getColumnIndexOrThrow(SeriesDatabase.SERIES_POSTER));
        poster=null;
        if (value.length() != 0) {
          poster=imageCache.getThumb(value);
          if (poster != null) {
            item.setImageViewBitmap(R.id.widgetPoster,poster);
          }
        }
      }
      views.addView(R.id.LinearLayoutWidget,item);
    }
  }
  upcomingEpisodes.close();
  Intent intent=new Intent(context,UpcomingRecentActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,0);
  views.setOnClickPendingIntent(R.id.LinearLayoutWidget,pendingIntent);
  if (layout != R.layout.appwidget) {
    Intent i=new Intent(context,ShowsActivity.class);
    i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    pendingIntent=PendingIntent.getActivity(context,0,i,0);
    views.setOnClickPendingIntent(R.id.widgetShowlistButton,pendingIntent);
  }
  updateIntent.setAction(REFRESH);
  PendingIntent pi=PendingIntent.getBroadcast(context,0,updateIntent,0);
  views.setOnClickPendingIntent(R.id.ImageButtonWidget,pi);
  return views;
}
