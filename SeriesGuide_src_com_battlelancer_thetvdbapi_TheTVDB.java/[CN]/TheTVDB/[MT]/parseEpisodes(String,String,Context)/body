{
  RootElement root=new RootElement("Data");
  Element episode=root.getChild("Episode");
  final ArrayList<ContentProviderOperation> batch=Lists.newArrayList();
  final HashSet<Long> episodeIDs=SeriesDatabase.getEpisodeIDsForShow(seriesid,context);
  final HashSet<Long> existingSeasonIDs=SeriesDatabase.getSeasonIDsForShow(seriesid,context);
  final HashSet<Long> updatedSeasonIDs=new HashSet<Long>();
  final ContentValues values=new ContentValues();
  episode.setEndElementListener(new EndElementListener(){
    public void end(){
      batch.add(SeriesDatabase.buildEpisodeOp(values,!episodeIDs.contains(values.getAsLong(Episodes._ID))));
      long seasonid=values.getAsLong(Seasons.REF_SEASON_ID);
      if (!updatedSeasonIDs.contains(seasonid)) {
        batch.add(SeriesDatabase.buildSeasonOp(values,!existingSeasonIDs.contains(seasonid)));
        updatedSeasonIDs.add(values.getAsLong(Seasons.REF_SEASON_ID));
      }
      values.clear();
    }
  }
);
  episode.getChild("id").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes._ID,body.trim());
    }
  }
);
  episode.getChild("EpisodeNumber").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.NUMBER,body.trim());
    }
  }
);
  episode.getChild("SeasonNumber").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.SEASON,body.trim());
    }
  }
);
  episode.getChild("DVD_episodenumber").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.DVDNUMBER,body.trim());
    }
  }
);
  episode.getChild("FirstAired").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.FIRSTAIRED,body.trim());
    }
  }
);
  episode.getChild("EpisodeName").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.TITLE,body.trim());
    }
  }
);
  episode.getChild("Overview").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.OVERVIEW,body.trim());
    }
  }
);
  episode.getChild("seasonid").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Seasons.REF_SEASON_ID,body.trim());
    }
  }
);
  episode.getChild("seriesid").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Shows.REF_SHOW_ID,body.trim());
    }
  }
);
  episode.getChild("Director").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.DIRECTORS,body.trim());
    }
  }
);
  episode.getChild("GuestStars").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.GUESTSTARS,body.trim());
    }
  }
);
  episode.getChild("Writer").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.WRITERS,body.trim());
    }
  }
);
  episode.getChild("Rating").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.RATING,body.trim());
    }
  }
);
  episode.getChild("filename").setEndTextElementListener(new EndTextElementListener(){
    public void end(    String body){
      values.put(Episodes.IMAGE,body.trim());
    }
  }
);
  HttpUriRequest request=new HttpGet(url);
  HttpClient httpClient=getHttpClient(context);
  execute(request,httpClient,root.getContentHandler(),true);
  return batch;
}
